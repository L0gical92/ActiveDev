import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import { challenge } from "@/types/challengeTemp";
import DisplayChallenges from "./components/DisplayChallenges";
import FooterNavbar from "./components/FooterNavbar";
function Challenges() {
  const [challenges, setChallenges] = useState<challenge[]>([]);

  const handleSubmit = async () => {
    const challenge = {
      publisher: (document.getElementById("publisher") as HTMLInputElement)
        .value,
      title: (document.getElementById("challengeTitle") as HTMLInputElement)
        .value,
      description: (document.getElementById("description") as HTMLInputElement)
        .value,
      category: (document.getElementById("category") as HTMLInputElement).value,
      location: (document.getElementById("location") as HTMLInputElement).value,
      time:
        (document.getElementById("time") as HTMLInputElement).value +
        "-" +
        (document.getElementById("finished_time") as HTMLInputElement).value,
    };
    const res = await fetch("/api/challenges", {
      method: "POST",
      body: JSON.stringify(challenge),
      headers: {
        "Content-Type": "application/json",
      },
    });
    const data = await res.json();
    setChallenges([challenge, ...challenges]);
  };

  useEffect(() => {
    async function fetchChallenges() {
      const res = await fetch("/api/challenges");
      const data = await res.json();
      setChallenges(data);
    }
    fetchChallenges();
  }, []);
  function hideForm() {
    const challengeForm = document.getElementById("challengeForm");
    const showForm = document.getElementById("show-form-btn");
    const cards = document.getElementById("cards");
    if (challengeForm && showForm && cards) {
      if (
        challengeForm.style.display === "none" ||
        challengeForm.style.display === ""
      ) {
        window.scrollTo({
          top: 0,
          behavior: "smooth",
        });
        challengeForm.style.display = "block";
        showForm.style.display = "none";
        cards.style.display = "none";
      } else {
        challengeForm.style.display = "none";
        showForm.style.display = "block";
        cards.style.display = "block";
      }
    }
  }

  return (
    <div className=" bg-white">
      <Head>
        <title>Active-startsida</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/Activeicon.ico" />
      </Head>
      <main className="">
        <div>
          <header className="fixed top-0 flex justify-center w-full h-30 bg-white border-t ">
            <div className="active flex items-center">
              <Image
                src={"/activelogga.png"}
                alt={"#"}
                width={"170"}
                height={"170"}
              ></Image>
            </div>
            <div className="profil">
              <Image
                src="/user-avatar.png"
                alt="Avatar"
                width={35}
                height={35}
              />
            </div>
          </header>
        </div>
        ¨
        <div className="fil">
          <p>för filtering av dagar och vänner</p>
        </div>
        <form
          id="challengeForm"
          className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 hidden"
        >
          <div className="mb-4">
            <label
              className="block text-gray-700 text-sm font-bold mb-2"
              htmlFor="publisher"
            >
              Publisher
            </label>
            <input
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="publisher"
              type="text"
              placeholder="Author name"
            />
          </div>
          <div className="mb-4">
            <label
              className="block text-gray-700 text-sm font-bold mb-2"
              htmlFor="challengeTitle"
            >
              Title
            </label>
            <input
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="challengeTitle"
              type="text"
              placeholder="Challenge title"
            />
          </div>
          <div className="mb-4">
            <label
              className="block text-gray-700 text-sm font-bold mb-2"
              htmlFor="description"
            >
              Description
            </label>
            <input
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="description"
              type="text"
              placeholder="Description"
            />
          </div>
          <div className="mb-4">
            <label
              className="block text-gray-700 text-sm font-bold mb-2"
              htmlFor="category"
            >
              Category
            </label>
            <input
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="category"
              type="text"
              placeholder="Category"
            />
          </div>
          <div className="mb-4">
            <label
              className="block text-gray-700 text-sm font-bold mb-2"
              htmlFor="location"
            >
              Location
            </label>
            <input
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="location"
              type="text"
              placeholder="Location"
            />
          </div>
          <div className="mb-4">
            <label
              className="block text-gray-700 text-sm font-bold mb-2"
              htmlFor="time"
            >
              Time
            </label>
            <div className="flex">
              <input
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="time"
                type="time"
                placeholder="Time"
              />
              _
              <input
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="finished_time"
                type="time"
                placeholder="Time"
              />
            </div>
          </div>

          <div className="flex items-center justify-between">
            <button
              className="purple1 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
              type="reset"
              id="button"
              onClick={() => {
                handleSubmit();
                hideForm();
              }}
            >
              Submit challenge
            </button>
            <button
              className="purple1 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline block"
              type="button"
              id="hide-form-btn"
              onClick={hideForm}
            >
              return
            </button>
            <button
              className="purple1 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline block"
              type="reset"
              id="hide-form-btn"
              onClick={hideForm}
            >
              exit
            </button>
          </div>
        </form>
        {/* Fetch challenges component */}
        <DisplayChallenges />
        <div className="w-full flex justify-end items-center fixed bottom-20">
          <button
            className="purple1 hover:bg-purple-700 text-white w-28 h-28 rounded-full "
            type="button"
            id="show-form-btn"
            onClick={hideForm}
          >
            Create a new challenge
          </button>
        </div>
        <FooterNavbar />
      </main>
    </div>
  );
}
export default Challenges;
